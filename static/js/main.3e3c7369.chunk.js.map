{"version":3,"sources":["components/Tree.tsx","components/Sortable.tsx","components/Collapsible.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tree","event","preventDefault","this","props","collapsible","collapse","currentTarget","nextElementSibling","classList","contains","remove","add","data","_this","react_default","a","createElement","className","map","item","index","children","length","key","onClick","onClickItem","text","renderDir","_this$props","concat","Component","Sortable","cloneData","Object","toConsumableArray","sort","b","sortData","_this2","React","Children","child","isValidElement","elementChild","cloneElement","objectSpread","recursiveCloneChildren","Collapsible","App","components_Collapsible","components_Sortable","components_Tree","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e3c7369.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport DirStructure from '../types';\nimport '../App.css';\n\nexport interface TreeProps {\n  data: DirStructure[];\n  collapsible?: Boolean;\n};\n\nclass Tree extends Component<TreeProps, {}> {\n  onClickItem(event: React.MouseEvent<HTMLElement>) {\n    event.preventDefault();\n    if (this.props.collapsible) {\n      const collapse = event.currentTarget.nextElementSibling;\n      if (collapse) {\n        if (collapse.classList.contains('active')) {\n          collapse.classList.remove('active');\n        } else {\n          collapse.classList.add('active');\n        }\n      }\n    }\n  }\n\n  renderDir(data: DirStructure[]) {\n    return (\n      <ul className=\"directory-list\">\n        { data.map((item, index) => {\n          if (item.children && item.children.length > 0) {\n            return (\n              <li key={index} className=\"directory-list__wrapper\">\n                <a\n                  className=\"directory-list__item\"\n                  onClick={event => this.onClickItem(event)}\n                >{ item.text }</a>\n                { this.renderDir(item.children) }\n              </li>\n            );\n          }\n          return <li key={index} className=\"directory-list__wrapper\">{ item.text }</li>\n        }) }\n      </ul>\n    )\n  }\n\n  render() {\n    const { data, collapsible } = this.props;\n\n    return (\n      <div className={`directory-tree ${collapsible ? 'collapsible' : ''}`}>\n        { this.renderDir(data) }\n      </div>\n    )\n  }\n}\n\nexport default Tree;\n","import React, { Component } from 'react';\nimport DirStructure from '../types';\nimport { TreeProps } from './Tree';\n\nexport interface SortableProps {\n  children: React.ReactNode;\n};\n\nclass Sortable extends Component<SortableProps, {}> {\n  sortData(data: DirStructure[]): DirStructure[] {\n    const cloneData: DirStructure[] = [ ...data ];\n    cloneData.sort( (a, b) => a.text < b.text ? -1 : a.text > b.text ? 1 : 0  );\n\n    return cloneData.map(item => {\n      if (item.children && item.children.length > 0) {\n        return {\n          text: item.text,\n          children: this.sortData(item.children)\n        };\n      }\n      return item;\n    });\n  }\n\n  recursiveCloneChildren(children: React.ReactNode): React.ReactNode {\n    return React.Children.map(children, (child, index) => {\n      if (React.isValidElement(child)) {\n        const childProps: any = child.props;\n        if (childProps.data) { // Tree Component\n          if (React.isValidElement<TreeProps>(child)) {\n            const elementChild: React.ReactElement<TreeProps> = child;\n            return React.cloneElement<TreeProps>(elementChild, {\n              ...elementChild.props,\n              key: index,\n              data: this.sortData(elementChild.props.data)\n            });\n          }\n        } else {\n          const elementChild: React.ReactElement<any> = child;\n          return React.cloneElement<any>(elementChild, {\n            ...elementChild.props,\n            key: index,\n            children: this.recursiveCloneChildren(elementChild.props.children)\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return this.recursiveCloneChildren(children);\n  }\n}\n\nexport default Sortable;\n","import React, { Component } from 'react';\nimport { TreeProps } from './Tree';\nimport { SortableProps } from './Sortable';\n\nexport interface CollapsibleProps {\n  children: React.ReactNode;\n};\n\nclass Collapsible extends Component<CollapsibleProps, {}> {\n  recursiveCloneChildren(children: React.ReactNode): React.ReactNode {\n    return React.Children.map(children, (child, index) => {\n      if (React.isValidElement(child)) {\n        const childProps: any = child.props;\n        if (childProps.data) { // Tree Component\n          if (React.isValidElement<TreeProps>(child)) {\n            const elementChild: React.ReactElement<TreeProps> = child;\n            return React.cloneElement<TreeProps>(elementChild, {\n              ...elementChild.props,\n              key: index,\n              collapsible: true,\n            });\n          }\n        } else {\n          const elementChild: React.ReactElement<any> = child;\n          return React.cloneElement<any>(elementChild, {\n            ...elementChild.props,\n            key: index,\n            children: this.recursiveCloneChildren(elementChild.props.children)\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    const { children } = this.props;\n    return this.recursiveCloneChildren(children);\n  }\n}\n\nexport default Collapsible;\n","import React from 'react';\nimport Tree from './components/Tree';\nimport Sortable from './components/Sortable';\nimport Collapsible from './components/Collapsible';\nimport './App.css';\n\nconst data = [\n  {\n    text: \"Movies\",\n    children: [\n      {\n        text: \"Horror\",\n        children: [\n          {\n            text: \"Halloween\"\n          },\n          {\n            text: \"Alien\"\n          }\n        ]\n      },\n      {\n        text: \"Action\",\n        children: [\n          {\n            text: \"Stone Cold\"\n          },\n          {\n            text: \"Commando\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    text: \"Books\",\n    children: [\n      {\n        text: \"Children of time\"\n      }\n    ]\n  }\n];\n\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container text-left\">\n        <Collapsible>\n          <Sortable>\n            <div>\n              <Tree data={data} />\n              <Tree data={data} />\n            </div>\n          </Sortable>\n        </Collapsible>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}